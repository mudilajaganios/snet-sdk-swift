//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: state_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// PaymentChannelStateService contains methods to get the MultiPartyEscrow
/// payment channel state.
/// channel_id, channel_nonce, value and amount fields below in fact are
/// Solidity uint256 values. Which are big-endian integers, see
/// https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
/// These values may be or may be not padded by zeros, service supports both
/// options.
///
/// Usage: instantiate `Escrow_PaymentChannelStateServiceClient`, then call methods of this protocol to make API calls.
internal protocol Escrow_PaymentChannelStateServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Escrow_PaymentChannelStateServiceClientInterceptorFactoryProtocol? { get }

  func getChannelState(
    _ request: Escrow_ChannelStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Escrow_ChannelStateRequest, Escrow_ChannelStateReply>
}

extension Escrow_PaymentChannelStateServiceClientProtocol {
  internal var serviceName: String {
    return "escrow.PaymentChannelStateService"
  }

  /// GetChannelState method returns a channel state by channel id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChannelState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getChannelState(
    _ request: Escrow_ChannelStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Escrow_ChannelStateRequest, Escrow_ChannelStateReply> {
    return self.makeUnaryCall(
      path: "/escrow.PaymentChannelStateService/GetChannelState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetChannelStateInterceptors() ?? []
    )
  }
}

internal protocol Escrow_PaymentChannelStateServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getChannelState'.
  func makeGetChannelStateInterceptors() -> [ClientInterceptor<Escrow_ChannelStateRequest, Escrow_ChannelStateReply>]
}

internal final class Escrow_PaymentChannelStateServiceClient: Escrow_PaymentChannelStateServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Escrow_PaymentChannelStateServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the escrow.PaymentChannelStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Escrow_PaymentChannelStateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

///Used to determine free calls available for a given user.
///
/// Usage: instantiate `Escrow_FreeCallStateServiceClient`, then call methods of this protocol to make API calls.
internal protocol Escrow_FreeCallStateServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Escrow_FreeCallStateServiceClientInterceptorFactoryProtocol? { get }

  func getFreeCallsAvailable(
    _ request: Escrow_FreeCallStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Escrow_FreeCallStateRequest, Escrow_FreeCallStateReply>
}

extension Escrow_FreeCallStateServiceClientProtocol {
  internal var serviceName: String {
    return "escrow.FreeCallStateService"
  }

  /// Unary call to GetFreeCallsAvailable
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFreeCallsAvailable.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFreeCallsAvailable(
    _ request: Escrow_FreeCallStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Escrow_FreeCallStateRequest, Escrow_FreeCallStateReply> {
    return self.makeUnaryCall(
      path: "/escrow.FreeCallStateService/GetFreeCallsAvailable",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFreeCallsAvailableInterceptors() ?? []
    )
  }
}

internal protocol Escrow_FreeCallStateServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getFreeCallsAvailable'.
  func makeGetFreeCallsAvailableInterceptors() -> [ClientInterceptor<Escrow_FreeCallStateRequest, Escrow_FreeCallStateReply>]
}

internal final class Escrow_FreeCallStateServiceClient: Escrow_FreeCallStateServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Escrow_FreeCallStateServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the escrow.FreeCallStateService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Escrow_FreeCallStateServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

