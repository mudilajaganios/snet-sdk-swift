//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: token_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


///It is expected that the user would call the GetChannelState to Determine the Current state of the Channel
///Based on the usage forecast, the user/client will have to sign for an amount L + U , where L is the last amount Signed
///and U is the amount based on expected usage.
///Please be aware that the Signing up an amount upfront ( Pre Paid) does come with a risk and hence the
///user must exercise caution on the amount signed specially with new service providers.
///If there is no need of making concurrent calls then you may consider pay per mode.
///Using a Token, the Client can now make concurrent calls, which was not supported previously with the pay per mode.
///However the pay per mode is a lot secure than the pre-paid mode.
///
/// Usage: instantiate `Escrow_TokenServiceClient`, then call methods of this protocol to make API calls.
internal protocol Escrow_TokenServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Escrow_TokenServiceClientInterceptorFactoryProtocol? { get }

  func getToken(
    _ request: Escrow_TokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Escrow_TokenRequest, Escrow_TokenReply>
}

extension Escrow_TokenServiceClientProtocol {
  internal var serviceName: String {
    return "escrow.TokenService"
  }

  /// GetToken method checks the Signature sent and returns a Token
  /// 1) The Signature is valid and has to be signed in the below format
  ///"__MPE_claim_message"+MpeContractAddress+ChannelID+ChannelNonce+SignedAmount
  ///Signature is to let the Service Provider make a claim
  /// 2) Signed amount >= Last amount Signed.
  ///  if Signed amount == Last Signed amount , then check if planned_amount < used_amount
  ///  if Signed amount > Last Signed amount , then update the planned amount = Signed Amount
  /// GetToken method in a way behaves as a renew Token too!.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getToken(
    _ request: Escrow_TokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Escrow_TokenRequest, Escrow_TokenReply> {
    return self.makeUnaryCall(
      path: "/escrow.TokenService/GetToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTokenInterceptors() ?? []
    )
  }
}

internal protocol Escrow_TokenServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getToken'.
  func makeGetTokenInterceptors() -> [ClientInterceptor<Escrow_TokenRequest, Escrow_TokenReply>]
}

internal final class Escrow_TokenServiceClient: Escrow_TokenServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Escrow_TokenServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the escrow.TokenService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Escrow_TokenServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

