// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: token_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TokenRequest is a request for getting a valid token.
struct Escrow_TokenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// channel_id contains id of the channel which state is requested.
  var channelID: UInt64 = 0

  /// current_nonce is a latest nonce of the payment channel.
  var currentNonce: UInt64 = 0

  ///signed_amount is the amount signed by client with current_nonce
  var signedAmount: UInt64 = 0

  /// Signature is a client signature of the message which contains 2 parts
  ///Part 1 : MPE Signature "__MPE_claim_message"+MpeContractAddress+ChannelID+ChannelNonce+SignedAmount
  ///Part 2 : Current Block Number
  var signature: Data = Data()

  ///current block number (signature will be valid only for short time around this block number)
  var currentBlock: UInt64 = 0

  var claimSignature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TokenReply message contains a latest channel state. current_nonce and
struct Escrow_TokenReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// current_nonce is a latest nonce of the payment channel.
  var channelID: UInt64 = 0

  ///it could be absent if none message was signed with current_nonce
  var token: String = String()

  ///If the client / user chooses to sign upfront , the planned amount in cogs will be indicative of this.
  var plannedAmount: UInt64 = 0

  ///If the client / user chooses to sign upfront , the used amount in cogs will be indicative of how much of the
  ///planned amount has actually been used.
  var usedAmount: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "escrow"

extension Escrow_TokenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_id"),
    2: .standard(proto: "current_nonce"),
    3: .standard(proto: "signed_amount"),
    4: .same(proto: "signature"),
    5: .standard(proto: "current_block"),
    6: .standard(proto: "claim_signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.channelID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.currentNonce) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.signedAmount) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.currentBlock) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.claimSignature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channelID != 0 {
      try visitor.visitSingularUInt64Field(value: self.channelID, fieldNumber: 1)
    }
    if self.currentNonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.currentNonce, fieldNumber: 2)
    }
    if self.signedAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.signedAmount, fieldNumber: 3)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 4)
    }
    if self.currentBlock != 0 {
      try visitor.visitSingularUInt64Field(value: self.currentBlock, fieldNumber: 5)
    }
    if !self.claimSignature.isEmpty {
      try visitor.visitSingularBytesField(value: self.claimSignature, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Escrow_TokenRequest, rhs: Escrow_TokenRequest) -> Bool {
    if lhs.channelID != rhs.channelID {return false}
    if lhs.currentNonce != rhs.currentNonce {return false}
    if lhs.signedAmount != rhs.signedAmount {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.currentBlock != rhs.currentBlock {return false}
    if lhs.claimSignature != rhs.claimSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Escrow_TokenReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_id"),
    2: .same(proto: "token"),
    3: .standard(proto: "planned_amount"),
    4: .standard(proto: "used_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.channelID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.plannedAmount) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.usedAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.channelID != 0 {
      try visitor.visitSingularUInt64Field(value: self.channelID, fieldNumber: 1)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 2)
    }
    if self.plannedAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.plannedAmount, fieldNumber: 3)
    }
    if self.usedAmount != 0 {
      try visitor.visitSingularUInt64Field(value: self.usedAmount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Escrow_TokenReply, rhs: Escrow_TokenReply) -> Bool {
    if lhs.channelID != rhs.channelID {return false}
    if lhs.token != rhs.token {return false}
    if lhs.plannedAmount != rhs.plannedAmount {return false}
    if lhs.usedAmount != rhs.usedAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
